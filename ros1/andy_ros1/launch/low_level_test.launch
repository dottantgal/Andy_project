<?xml version="1.0"?>
<launch>

  <!-- ROS serial connections -->
  <!-- Run the Teensy 3.6 motors node -->
  <node pkg="rosserial_python"
        type="serial_node.py"
        name="teensy_motors"
        output="screen">
    <param name="port" value="/dev/ttyACM1" />
    <param name="baud" value="500000" />
  </node>

  <!-- Run the Teensy LC MPU6050 node-->
  <node pkg="rosserial_python"
        type="serial_node.py"
        name="teensy_imu"
        output="screen">
    <param name="port" value="/dev/ttyACM0"/>
    <param name="baud" value="500000" />
  </node>
  <!-- END ROS serial connections -->


  <!-- Run motor PID node -->
  <node pkg="andy_ros1"
        type="motors_pid_odom"
        name="andy_ros1_motors_pid_odom"
        output="screen"
        respawn="true">
    <param name="Kp" value="0.7" type="double" /><!--OLD VALUE 0.85 -->
    <param name="Ki" value="0.3" type="double" /><!--OLD VALUE 0.4 -->
    <param name="Kd" value="0.1" type="double" /><!--OLD VALUE 0.15 -->
    <param name="Wheel_diameter" value="0.136" type="double" />
    <param name="Base_width" value="0.275" type="double" />
    <param name="Ticks_per_rev" value="2652" type="int" />
    <param name="out_min" value="-512" type="int" />
    <param name="out_max" value="512" type="int" />
    <param name="max_rpm" value="146" type="int" /> <!--OLD VALUE 60RPM -->
    <param name="debug" value="true" type="bool" />
    <param name="publish_tf" value="false" type="bool" />
    <param name="motors_pid_odom_loop_rate" type="int" value="10"/>
  </node>


  <!-- Run the IMU msg creator MPU6050-->
  <node pkg="mpu_imu"
        type="imu_type_creator_tf2_6050"
        name="imu_type_creator_tf2_6050"
        output="screen"
        respawn="true">
  </node>


	<!-- Run the motors odometry creation node
  <node pkg="andy_ros1"
        type="serial_sensor_pid"
        name="andy_ros1_odometry"
        output="screen"
        respawn="true">
    <param name="serial_sensor_pid_loop_rate" type="int" value="20"/>
    <param name="imu_message_serial_sensor" type="bool" value="false"/>
    <param name="publish_tf" type="bool" value="false"/>
  </node>-->


  <!-- run the odom creator
  <node pkg="mpu_imu"
        type="odom_creator"
        name="odom_creator"
        output="screen"
        respawn="true">
    <param name="serial_sensor_pid_loop_rate" type="int" value="20"/>
    <param name="imu_message_serial_sensor" type="bool" value="true"/>
    <param name="publish_tf" type="bool" value="true"/>
  </node>-->

  <!-- run the teensy PID tuner
  <node pkg="andy_ros1_pid"
        type="andy_ros1_pid_configure"
        name="andy_pid_configure"
        output="screen">
  </node>-->


  <!-- Run the imu calibration node -->
  <node pkg="imu_calib" type="apply_calib" name="apply_calib" output="screen" respawn="false">
      <param name="calib_file" value="$(find andy_ros1)/param/imu_calib.yaml" />
      <param name="calibrate_gyros" value="true" />
      <remap from="/raw/" to="/imu/6050"/>
  </node>


  <!-- Run the filtering and fusing raw imu data node
  <node pkg="imu_filter_madgwick" type="imu_filter_node" name="imu_filter_madgwick" output="screen" respawn="false" >
      <param name="fixed_frame" value="base_link" />
      <param name="use_mag" value="false" />
      <param name="publish_tf" value="false" />
      <param name="use_magnetic_field_msg" value="false" />
      <param name="world_frame" value="enu" />
      <param name="orientation_stddev" value="0.0" />
      <remap from="/imu/data_raw" to="/corrected"/>
  </node>-->


  <!-- Run the Odom-IMU Extended Kalman Filter localization node-->
  <node pkg="robot_localization" type="ekf_localization_node" name="ekf_localization">
      <remap from="odometry/filtered" to="odom" />
      <rosparam command="load" file="$(find andy_ros1)/param/robot_localization.yaml" />
  </node>


  <!-- Static transformations tree-->
  <!-- Publish static transformation from base_link to imu
  <node pkg="tf2_ros"
        type="static_transform_publisher"
        name="base_footprint_to_imu_6050_link"
        args="0.0 0.0 0.0 0.0 0.0 0.0 /base_footprint /imu_6050_link">
  </node>-->


  <!-- Publish static transformation from base_link to left_motor_link -->
  <node pkg="tf2_ros"
        type="static_transform_publisher"
        name="base_link_to_left_motor_link"
        args="0.0 -0.125 0.0 0.0 0.0 0.0 /base_link /left_motor_link">
  </node>


  <!-- Publish static transformation from base_link to right_motor_link -->
  <node pkg="tf2_ros"
        type="static_transform_publisher"
        name="base_link_to_right_motor_link"
        args="0.0 0.125 0.0 0.0 0.0 0.0 /base_link /right_motor_link">
  </node>


  <!-- Publish static transform from base_footprint to base_link
  <node pkg="tf2_ros"
        type="static_transform_publisher"
        name="base_footprint_to_base_link"
        args="0 0 0.05 0 0 0  /base_footprint /base_link"/>-->
  <!-- END static transformations tree-->

</launch>
